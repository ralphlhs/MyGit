1. Hierachy
	씬에 포함되어 있는 게임 오브젝트이 리스트를 보여줌
2. Scene
	사용자가 만들 월드. 오브젝트를 선택하고 배치하는 영역
3. Game
	게임의 카메라를 통해 렌더링이 되어 보여지는 화면. 게임에 대한 퍼블리싱을 했을때 보여지는 화면. 게임화면
4. Inspector
	게임 오브젝트가 가지고 있는 컴포넌트에 대한 정보를 확인하고, 적용할 수 있는 창. 기능수정, 설정용 창.
5. Assets 폴더
	유니티 프로젝트에서 사용할 폴더, 영상, 사운드파일 등을 전부 지칭. 에셋폴더에서는 프로젝트에 사용할 파일을 저장하거나 복사하는 위치입니다.
	유니티에서는 해당 폴더에 파일이 추가되거나 수정될 경우 자동으로 즉시 인식하는 특징을 가지고 있습니다. 
6. Project
	유니티에서 진행할 프로젝트와 관련된 모든 파일을 표시하는 창. << 에셋이나 프로젝트 내부의 파일을 찾는 용도.
7. Console
	오류와, 경고 또는 에디터가 생성하는 메세지가 표시되는 영역.


비쥬얼 스튜디오의 솔루션에서 폴더를 선택한 상태로 스크립트 파일을 만들 경우 폴더에 맞는 이름으로 namespace가 자동으로 설정됩니다.

일반적으로 유니티 엔진에서 만들 경우에는 별로의 namespace를 지정하지 않습니다. 

그리고 만들어진 namespace는 마찬가지로 using 키워드를 이용하면 코드 내에 포함시키는게 가능합니다. 

Gradle Fail은 유니티 엔진 자체를 다시깐다.

void 효과데미지(int damage)
{
  damage만큼 데미지를 준다. 
}

효과데미지(100);
// 작성한 인자(100)은 매개변수 (damage)에 저장(전달) 내부의 코드의 기능을 수행합니다. damage는 100이기 때문에 100만큼 데미지를 주게 됩니다. 
작업종료


패키지(package)
에셋에 대한 설정들과 메타 데이터 등을 저장하는 기능입니다.

export를 통해 프로젝트에 있는 Assets에 있는 에셋들을 선택해 패키지화 할 수 있습니다. 
import를 통해 다른 프로젝트에 패키지의 내용을 추가할 수 있습니다. 


패키지를 이용해 특정 기능에 대한 업데이트를 진행하는것도 가능은 합니다.
1. 기존의 작업된 내용을 패키지화 합니다.
2. 다른 프로젝트에서 해당 작업을 기반으로 새로운 시스템을 구축합니다.
3. 추가 개발이 마무리 됐다면 해당 내용을 패키지화 합니다.
4. 기존 프로젝트에 패키지의 구성요소인 내용들을 제거하고, 새로 개발된 패키지를 통해 프로젝트에 추가하고 상화 연결 작업을 선택합니다. 

+++++++++++++++++++++++++++++++++++깃허브+++++++++++++++++++++++++++++++++++++++++++++++
Repository : 저장소
path : 데이터 전달 경로
Git Ignore : 관리할 필요가 없는 파일을 의미
License : 소스 코드 가져다 사용할 때 저작권 관련해서 어떤 라이센스로 이용 가능하지에 대한 명확히 기술할 파일 처리.

기본 작업용 단축키
Ctr+
F2 : 이름 변경
