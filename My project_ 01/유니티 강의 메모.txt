1. Hierachy
	씬에 포함되어 있는 게임 오브젝트이 리스트를 보여줌
2. Scene
	사용자가 만들 월드. 오브젝트를 선택하고 배치하는 영역
3. Game
	게임의 카메라를 통해 렌더링이 되어 보여지는 화면. 게임에 대한 퍼블리싱을 했을때 보여지는 화면. 게임화면
4. Inspector
	게임 오브젝트가 가지고 있는 컴포넌트에 대한 정보를 확인하고, 적용할 수 있는 창. 기능수정, 설정용 창.
5. Assets 폴더
	유니티 프로젝트에서 사용할 폴더, 영상, 사운드파일 등을 전부 지칭. 에셋폴더에서는 프로젝트에 사용할 파일을 저장하거나 복사하는 위치입니다.
	유니티에서는 해당 폴더에 파일이 추가되거나 수정될 경우 자동으로 즉시 인식하는 특징을 가지고 있습니다. 
6. Project
	유니티에서 진행할 프로젝트와 관련된 모든 파일을 표시하는 창. << 에셋이나 프로젝트 내부의 파일을 찾는 용도.
7. Console
	오류와, 경고 또는 에디터가 생성하는 메세지가 표시되는 영역.


비쥬얼 스튜디오의 솔루션에서 폴더를 선택한 상태로 스크립트 파일을 만들 경우 폴더에 맞는 이름으로 namespace가 자동으로 설정됩니다.

일반적으로 유니티 엔진에서 만들 경우에는 별로의 namespace를 지정하지 않습니다. 

그리고 만들어진 namespace는 마찬가지로 using 키워드를 이용하면 코드 내에 포함시키는게 가능합니다. 

Gradle Fail은 유니티 엔진 자체를 다시깐다.

void 효과데미지(int damage)
{
  damage만큼 데미지를 준다. 
}

효과데미지(100);
// 작성한 인자(100)은 매개변수 (damage)에 저장(전달) 내부의 코드의 기능을 수행합니다. damage는 100이기 때문에 100만큼 데미지를 주게 됩니다. 
작업종료


패키지(package)
에셋에 대한 설정들과 메타 데이터 등을 저장하는 기능입니다.

export를 통해 프로젝트에 있는 Assets에 있는 에셋들을 선택해 패키지화 할 수 있습니다. 
import를 통해 다른 프로젝트에 패키지의 내용을 추가할 수 있습니다. 


패키지를 이용해 특정 기능에 대한 업데이트를 진행하는것도 가능은 합니다.
1. 기존의 작업된 내용을 패키지화 합니다.
2. 다른 프로젝트에서 해당 작업을 기반으로 새로운 시스템을 구축합니다.
3. 추가 개발이 마무리 됐다면 해당 내용을 패키지화 합니다.
4. 기존 프로젝트에 패키지의 구성요소인 내용들을 제거하고, 새로 개발된 패키지를 통해 프로젝트에 추가하고 상화 연결 작업을 선택합니다. 


콜라이더 : 콜라이더를 등록한 오브젝트는 충돌 감지 범위를 설정할 수 있습니다. 
유니티에서는 다양한 모양에 맞는 콜라이더가 제공되고 있으며, 상황에 따라서는 직접 모양을 구현하는 경우도 존재합니다.

리지드바디 : 유니티 엔진의 물리적인 충돌 연산을 진행하는 도구.  ---> 물리엔진
1. 바디타입 : 물리 제어에 대한 유형을 선택할 수 있습니다. 
	Dynamic : 모든 물리 현상을 받는 형태. 중력, 충돌에 의한 힘 등을 전부 계산.
	Static : 물리 현상을 받지 않고 고정된 형태.
	Kinematic : 물리 현상은 받지 않음. 스크립트를 통해 움직임을 진행하는건 가능. (Transform으로 조작)
	Gravity Scale : 중력 수치.
	Mass : 오브젝트의 질량(Kg)
	Linear : 포지션 움직임에 영향을 미치는 저항 계수.
	Angular : 회전 움직임에 영향을 미치는 저항 계수.
	Collision Detection : 충돌 검사 방식에 대한 정의.
		Discrete : 서로 겹치거나 통과, 충돌 접점은 새 포지션에서 생성되는 방식(Default)
		Continous : 서로 통과하지 않음. 내부에서 충돌 포인트를 계산해서 오브젝트를 해당 위치로 이동시키는 방식.
	Interpolate : 물리 업데이트 간의 움직임. 보간 설정 >>> 움직임이 어색할때 모드 선택.
		inter : 이전 프레임에서의 포지션에 근거해 움직임을 처리합니다.
		Extra : 다음 프레임에서의 포지션을 수정해서 움직임을 처리합니다.
	Constraint : 제약조건
		Position : 위치
		Rotation : 
	Layer Override : 자신의 콜라이더와 겹치는 충돌이 발생했을 경우 어떤것을 우선적으로 처리할지를 정해주는 기능.
		Include : 특정 물체에만 충돌 체크가 되도록 설정.
		Exclude : 설정한 레이어와의 콜라이더 접촉은 무시합니다. 


태그와 레이어 : 유니티에서 게임 오브젝트이 경우 각각의 고유한 이름이 존재합니다. 그리고 오브젝트들을 따로 분류하기 위한 값인 태그와 레이어가 존재합니다. 

태그(소규모) : 각 게임 오브젝트에 대한 식별.

레이어(대규모) : 1. 오브젝트에 대한 그룹을 만들고 관리. 
           2. 특정 그룹의 오브젝트를 카메라 렌더링에서 빼는 경우. --> 선택적 렌더링. 
           3. *** 레이어를 기반으로 오브젝트 그룹 간의 충돌 처리를 따로 설정할수 있습니다. (Layer Matrix)
	4. 물리 연산을 통해 충돌을 가상의 빔을 쏴서 오브젝트의 충돌을 판단하는 경우 특정 레이어의 충돌을 막는게 가능.(레이 캐스팅 충돌의 Layer Mask)
	5. Sorting Layer >> 오브젝트 내에서 렌더링 순서를 정의하는 겁니다. 

Prefabs : 원본을 참고하여 복제품을 양산 할 수 있도록 따로정의한 것. >>게임 오브젝트를 에셋으로 만들어주는것.
	만드는법 : 씬에 있는 오브젝트를 Asset폴더로 드래그.
	Unpack : 프리팹을 푸는기능. 이때 프리팹 에셋이 삭제되는것은 아니며 프리팹 인스턴스(instance)에만 영향을 줍니다.

	인스턴스(instance) : 어떠한 상황이나 행동 등 무언가를 특정한 형태로 만들어주는것을 의미합니다. 
	C#에서는 예약어 new를 통한 생성을 의미함. << Unpacking

	기좀에 프리팹으로 설저된 오브젝트를 가지고 다시 프리팹으로 만들려고 할 경우 
	아래의 기능 중 하나를 선택합니다. 
	Original Prefab :현재 형태로 새로운 프리팹을 생성
	Prefab Variant : 기존의 프리팹을 상속받는 새로운 프리팹으로 생성합니다. (상속가능)
		ex) 특정 타겟을 설정할 때 일부 타겟을 대상으로 운반가능. 음향효과 등을 내도록 따로 처리하는 경우.

리소스 폴더 : 유니티에서 제공해주는 리소스에 대한 로드 폴더입니다. 리소스 폴더 안의 파일의 경로를 통해 접근될 수 있게 만들어 주니다. 
	장점 : 쓰기 쉬움.
	단점 : 빌드 시에 포함되기 때문에 빌드 사이즈가 커짐. --> 앱 시작 시간이 길어짐.
	정해진 에셋 이름을 통해 로드를 지행하기 때문에 이름 수정이 번거로움.
유니티에 존재하는 특수 폴더들
Assets : 유니티 프로젝트에서 사용할 에셋이 포함되는 메인폴더
일반적인 기능들은 에셋 폴더에 있다고 가정하기에 따로 경로를 알려줄 필요가 없음.

Editor : 해당 폴더에 존재하는 스크립트는 에이터 전용 스크립트로 취급됩니다. 
Plugins : C/C++ 기반으로 작성되는 native DLL파일을 배치하는 폴더.
위 폴더는 보통 플러그인 연동 진행시 별도로 만들 필요없이 만들어진 것들을 그냥 사용하면 되기에 폴더 생성을 따로 할 상황이 크게 많이 없음.

Resources : 
Standard Assets : 기본제공
Streaming Assets : ios 동영상 파일


++++++++++++++++++++++++2월 5일 수업++++++++++++++
1. 터레인 2. 슈팅게임 3. 텍스트메쉬프로 4. 프로빌더 5. 스카이박스

터레인 작업후 F를 누르면 맵보기 편함.
터레인 : 3d 프로젝트에서 사용하는 맵제작용 도구
	나무 배치툴, 브러시 툴제공
	텍스처 활용으로 페인팅 기능.
	터레인 관련 작업 기능
	1. 고도 설정, 
	Raise or lower (좌클릭->지형 올리기, shift+좌틀릭 -> 지형 내리기)
	Terrain, Stamp 
터레인 레이어 분석
Diffuse : 물체에 깊이감과 입체감을 부여, 표면에 색을 부여하는 요소.
Normal Map : 입체상의 x, y, z 좌표들을 탄젠트 함수로 변환해 RGB좌표로 만든 그림 >> 평면상에높이 값이 있는 것처럼 빛 반사 처리를 바꾸어주는 역할.
Normal Scale : 노말 맵에서 설정 할 수 있는 스케일 값입니다.
0 ; 조명 계산에 아무 영향을 미치지 않습니다.
1 : 100%
2 : 더 뚜렷하게 나타남
-1 : 반대방향 처리.


Mask Map : 고해상도에서 사용하는 텍스처 설정
메탈릭, 평활도, 타일링 설정 등을 잡을 수 있습니다.

1. Play On Awake 설정 제거
2. Looping제거로 반복제거.
3. Start Lifetime = 1 (파티클 생명주기(지속시간)을 1초)
4. Emission에 Bursts기능 활성화 : (파티클 시스템의 방출속도와 타이밍을 설정하는 모듈)

이미션 기본 설정값
Rate over Time : 시간 단위 당 방출되는 파티클 수
Rate over Distance : 이동 거리당 방출되는 파티클 수

버스트 설정값
Time : 버스트 방출 시점
Count : 버스트할 파티클 갯수
Cycles : 버스트를 반복할 횟수
Interval : 버스트 반복되는 시간 사이의 간격 설정.
Probability : 파티클 생성 가능성 체크. 값이 1일 경우 100% 생성

모양 설정, Sphere, 

TMP 전용 폰트만들기
메쉬프로는 한글깨지는 경향이 있어서 전용폰트 설정을 진행해줘야함.
FontAssetCreator




+++++++++++++++++++++++++++++++++++ C# +++++++++++++++++++++++++++++++++++++++++++++++
Ctrl +k +d : 자동 줄 정렬
Ctrl +y
Shift+방향키 또는 마우스 스크롤 하고 Ctrl + / 한꺼번에 주석처리.

BigInteger bigInteger = 100; 숫자가 무한히 저장공간이 올라감.
size of (int) <<-- 메모리의 크기를 알려줌.

Ctl +  Shift + F : 찾기
F9 : 디버깅
F9 -> 디버그 실행 -> 창 -> 디스어셈블리(어셀블리어를 보여줌)

자료형으로 메모리 공간 만들기

byte

int - 대부분 자료형
char- 2바이트 utf-16 -> 인코딩 디코딩
bool - 비교 연산자, 논리 연산자 if
float - unity좌표계, vector

변수
int 변수명 : camelCase
변수명 = 1;

변수가 여러개 배열

int[] 배열명 = new int[10];
for (int i = 0; i<10 ; i++) { }
IEnumerator, IEnumerable

반복자, coroutine, yield

ArrayList, LinkedList, Dictionary, Hashtable 구현
foreach(var data in 배열명) { }

While(엔진이 실행) { }

----> 곱하기 나누기 최적화
complier 최적화 -> bit연산 -> Layer -> 코데 -> 최적화
움직이는거 만들었음. 절차지향 프로그래밍 -> 객체지향 프로그래밍.(다수의 사람이 작업하기 좋음. 협업)
cout

c#  --> 객체지향으로만 되어 있어요. --> tool
c++  --> 반만 객체지향. C --> 메인 로직 --> 하드웨어 렌더링
class Hello{
public static int main(String args[]) { }
}

+++++++++++++++++++++++++++++++++++깃허브+++++++++++++++++++++++++++++++++++++++++++++++
Repository : 저장소
path : 데이터 전달 경로
Git Ignore : 관리할 필요가 없는 파일을 의미
License : 소스 코드 가져다 사용할 때 저작권 관련해서 어떤 라이센스로 이용 가능하지에 대한 명확히 기술할 파일 처리.

기본 작업용 단축키
Ctr+
F2 : 이름 변경
++++++++++++++++++++++++++++++++++기타++++++++++++++++++++++++++++++++++++++++++++++++
게임의 시초 : 가위, 바위, 보 ---> 스타크래프트

